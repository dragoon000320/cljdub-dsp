(ns cljdub-dsp.effect-test
  (:require [cljdub-dsp.prop-test :refer :all]
            [clojure.test :refer :all]
            [cljdub-dsp.prop :refer :all]
            [cljdub-dsp.operation :refer :all]
            [cljdub-dsp.effect :refer :all]))

(def low-pass-test-result
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -2 -1 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -4 -3 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -5 -4 -5 -4 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5])

(def high-pass-test-result
  [0 0 0 0 -1 0 0 0 0 0 -3 -1 -1 0 -1 0 -2 -2 1 1 0 0 0 0 2 0 2 0 3 1 4 1 3 1 4 2 4 1 4 2 4 3 1 0 2 2 0 1 -1 0 2 1 2 2 1 0 0 0 -1 -2 -3 -2 -4 -2 -3 0 -1 -2 -5 -5 -6 -4 -10 -7 -9 -7 -6 -5 -6 -6 -3 -2 -4 -4 -1 -3 -1 0 -1 -3 0 0 0 0 0 0 -2 0 -1 -1 0 0 2 1 -3 -2 -5 -4 2 3 5 4 1 2 2 3 1 2 4 4 3 3 1 3 1 3 2 3 6 4 3 0 4 1 5 3 2 0 3 2 2 1 4 4 2 3 -1 -1 2 2 0 0 1 0 2 2 1 1 3 3 3 2 -3 -3 -5 -5 5 3 0 -1 -1 -1 4 4 0 1 3 4 0 1 -2 -2 3 1 0 -1 0 0 0 0 -3 -1 -4 -2 -1 0 -1 -1 -2 -2 -1 -1 1 0 5 5 2 2 0 0 5 3 -4 -5 3 1 3 3 -4 -3 2 2 1 2 -1 0 0 1 -1 -1 0 0 0 0 0 0 -1 -1 -1 -1 -3 -3 -3 -3 0 0 -2 -2 -1 -1 -1 -1 -3 -3 -4 -4 -4 -3 -1 -1 -6 -7 -4 -4 -2 -2 -9 -8 -6 -5 -4 -3 -2 -2 -4 -2 -5 -4 1 1 -1 0 0 0 0 0 0 0 0 0 0 0 3 1 0 -1 2 2 2 2 2 2 3 3 0 0 1 2 0 0 -1 -2 3 2 2 0 2 1 -1 0 0 0 3 3 1 1 3 2 0 0 0 0 3 3 3 4 5 4 2 2 3 3 1 1 0 0 2 3 1 1 0 1 1 2 3 3 0 0 -2 -1 1 1 0 0 0 1 0 1 -1 0 0 0 0 0 1 1 1 0 -1 -2 1 0 1 0 -2 -2 0 0 1 1 0 0 1 1 1 1 -1 -1 -1 -1 1 0 1 0 -2 -2 0 0 1 1 0 0 1 1 0 0 -1 0 -1 0 0 0 2 1 0 0 0 0 0 1 -1 0 -1 0 0 1 0 0 0 0])

(def band-pass-test-result
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1])

(deftest invert-phase-test
  (let [seg (test-seg)
        seg-samples (samples seg)
        seg-samples-inverted (-> seg invert-phase samples)]
    (is (every? #(let [[l r] %]
                   (= (-' l) r))
                (partition 2
                           (interleave seg-samples
                                       seg-samples-inverted))))))

(deftest low-pass-test
  (is (= (-> (test-seg) (low-pass 350) samples vec)
         low-pass-test-result)))

(deftest high-pass-test
  (is (= (-> (test-seg) (high-pass 350) samples vec)
         high-pass-test-result)))

(deftest band-pass-test
  (is (= (-> (test-seg) (band-pass 350 600) samples vec)
         band-pass-test-result)))
